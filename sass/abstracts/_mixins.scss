/* Clearfix appends a pseudo-element after the element which will then clear floats.
    If an element's child elements are floated left/right, then the element's height will collapse.
    Always specify the content property; otherwise, the pseudo-element will not appear.
        (Specify the content as empty, so it's not visible.)
    The clear property will clear both right and left floats. */
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

/* This mixin is for elements that need to be centered horizontally and vertically.
    It positions the element halfway down the page and halfway from the left of the page.
    It ensures the center of the element aligns with the center of its parent through the transformation. */
@mixin centerHorizontalVertical {
  position: absolute;
  /* This moves the element 50% of its parent element's height down and 50% of its parents element's width to the left. */
  top: 50%;
  left: 50%;
  /* The transform property pulls the element back to the center by translating it 50% of it's own width to the right
        and 50% of its own height upward. */
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER
/* 
0 - 600px: Phone
600px - 900px: Tablet Portrait
900px - 1200px: Tablet Landscape
1200px - 1800px: Desktop <-- where our normal styles apply
1800+px: Big Desktop

$breakpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop (note: this will use min-width)
*/

/* @content: a directive that allows @mixin to take blocks of style wherever it is used */
/* In media queries, em and rem are not affected by a root font-size.
    This means that 1em or 1rem is always equal to the font size coming from the browser.
    By default, it's 16px, but if the user changes it to, for example, 20px, then it will be 20px regardless of what is in the base font definition.
  Best practice is to use em for media queries.
    Assume that 1em = 16px for media queries. */
@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    // 600px
    @media (max-width: 37.5em) {
      @content;
    }
  }
  @if $breakpoint == tab-port {
    // 900px
    @media (max-width: 56.25em) {
      @content;
    }
  }
  @if $breakpoint == tab-land {
    // 1200px
    @media (max-width: 75em) {
      @content;
    }
  }
  @if $breakpoint == big-desktop {
    // 1800px
    @media (min-width: 112.5em) {
      @content;
    }
  }
}
