/* Clearfix appends a pseudo-element after the element which will then clear floats.
    If an element's child elements are floated left/right, then the element's height will collapse.
    Always specify the content property; otherwise, the pseudo-element will not appear.
        (Specify the content as empty, so it's not visible.)
    The clear property will clear both right and left floats. */
/* Custom animations can be created with @keyframes rule.
    For browser performance, IT'S BEST TO ONLY ANIMATE OPACITY AND TRANSFORM PROPERTIES.
    That's what browsers are optimized for. */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    -webkit-transform: translateX(-10rem);
    -moz-transform: translateX(-10rem);
    -ms-transform: translateX(-10rem);
    -o-transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem);
    -webkit-transform: translateX(1rem);
    -moz-transform: translateX(1rem);
    -ms-transform: translateX(1rem);
    -o-transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    -webkit-transform: translate(0);
    -moz-transform: translate(0);
    -ms-transform: translate(0);
    -o-transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
    -webkit-transform: translateX(10rem);
    -moz-transform: translateX(10rem);
    -ms-transform: translateX(10rem);
    -o-transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem);
    -webkit-transform: translateX(-1rem);
    -moz-transform: translateX(-1rem);
    -ms-transform: translateX(-1rem);
    -o-transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0);
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -ms-transform: translateX(0);
    -o-transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
    -webkit-transform: translateY(3rem);
    -moz-transform: translateY(3rem);
    -ms-transform: translateY(3rem);
    -o-transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0);
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0); } }

/* The inherit keyword forces inheritance. (See box-sizing specifications in body.) */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

/* By setting the root font size to a percentage (rather than a pixel value),
the font size will be determined as a percentage of the font size given by the browser.
This is best practice, so if users accessing the page have a specified font size setting,
then the font will adjust according the to their specifications.
This will be considered the root for the rem values.
Otherwise, the root will stay as the pixel value you provide.
The default browser font size is 16px.
Below, we want 10px as the root, so we found the percentage 10 is of 16. */
/* FYI: rem is  not supported below IE9 */
html {
  font-size: 62.5%; }

/* https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

/* The backface-visibilty is meant to refer to the backside of an element.
    In this case, it is preventing animation side effects (like shifts) .*/
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  margin-bottom: 6rem;
  /* All span elements are inline by default.
            The display block creates line breaks because it takes up 100% of the width, which creates a 2-lined h1. */
  /* The animation properties apply the @keyframes rules. */
  /* The animation property is short-hand for the animation properties in heading-primary-main. */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*
          animation-delay: 3s;
          animation-iteration-count: 3;
          */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    -webkit-animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all 0.2s;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  -ms-transition: all 0.2s;
  -o-transition: all 0.2s; }
  .heading-secondary:hover {
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    -webkit-transform: skewY(2deg) skewX(15deg) scale(1.1);
    -moz-transform: skewY(2deg) skewX(15deg) scale(1.1);
    -ms-transform: skewY(2deg) skewX(15deg) scale(1.1);
    -o-transform: skewY(2deg) skewX(15deg) scale(1.1); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-top-big {
  margin-top: 8rem; }

.u-margin-top-huge {
  margin-top: 10rem; }

/* link & visited are pseudo-classes (a special state of a selector) */
/* The inline-block displays an element as inline-level block container.
    This treats the element as if it is text, so the parent class (aka text-box) should use text-align to center. */
/* A high border-radius will have the same effect.
    Ex: 100px will display the same as 500px */
/* The transition property is the simpler method to perform an animation (compared to @keyframes).
    It allows a smooth gradual change through a specified timeframe.
    Here, all is specified, so all properties (translations in hover and active) will be animated with transition. */
.btn {
  /* To give the effect of pressing a button, adjust box-shadow.
        box-shadow: [x] [y] [blur] [rgba(r, g, b, opacity)] */
  /* The active pseudo-class reprecents when the link is clicked. */
  /* Transformations are in relation to the initial state - NOT the previous state. */
  /* ::after is a pseudo-element
      It acts like a virtual child element after the element selected.
      The content and display properties are required for ::after.
      Setting the position as absolute in relation to the parent will allow it to be in the same place as the parent.
      Setting the z-index to -1 makes sure this is behind the parent. */
  /* animation: [name] [duration] [timing-function] [delay] */
  /* The animation-fill-mode property specifies a style for the element when the animation is not playing.
      Below it is set as backwards, which will use moveInBottom at the 0% keyframe properties during the delay. */ }
  .btn:link, .btn:visited {
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    -webkit-border-radius: 10rem;
    -moz-border-radius: 10rem;
    -ms-border-radius: 10rem;
    -o-border-radius: 10rem;
    transition: all 0.2s;
    -webkit-transition: all 0.2s;
    -moz-transition: all 0.2s;
    -ms-transition: all 0.2s;
    -o-transition: all 0.2s;
    position: relative; }
  .btn:hover {
    transform: translateY(-3px);
    -webkit-transform: translateY(-3px);
    -moz-transform: translateY(-3px);
    -ms-transform: translateY(-3px);
    -o-transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      opacity: 0;
      transform: scaleX(1.4) scaleY(1.6);
      -webkit-transform: scaleX(1.4) scaleY(1.6);
      -moz-transform: scaleX(1.4) scaleY(1.6);
      -ms-transform: scaleX(1.4) scaleY(1.6);
      -o-transform: scaleX(1.4) scaleY(1.6); }
  .btn:active {
    transform: translateY(-1px);
    -webkit-transform: translateY(-1px);
    -moz-transform: translateY(-1px);
    -ms-transform: translateY(-1px);
    -o-transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
    -webkit-transition: all 0.4s;
    -moz-transition: all 0.4s;
    -ms-transition: all 0.4s;
    -o-transition: all 0.4s;
    -webkit-border-radius: 10rem;
    -moz-border-radius: 10rem;
    -ms-border-radius: 10rem;
    -o-border-radius: 10rem; }
  .btn--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    -webkit-animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  -ms-transition: all 0.2s;
  -o-transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
  -webkit-transform: translateY(-2px);
  -moz-transform: translateY(-2px);
  -ms-transform: translateY(-2px);
  -o-transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0);
  -webkit-transform: translateY(0);
  -moz-transform: translateY(0);
  -ms-transform: translateY(0);
  -o-transform: translateY(0); }

.card {
  /* The perspective property determines the distance between the z=0 plane and the user to give a 3D-positioned element
        some perspective. */
  perspective: 150rem;
  -webkit-perspective: 150rem;
  -moz-perspective: 150rem;
  -ms-perspective: 150rem;
  -o-perspective: 150rem;
  height: 52rem;
  position: relative; }
  .card__side {
    height: 52rem;
    transition: all 0.8s ease;
    -webkit-transition: all 0.8s ease;
    -moz-transition: all 0.8s ease;
    -ms-transition: all 0.8s ease;
    -o-transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    border-radius: 3px;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    -ms-border-radius: 3px;
    -o-border-radius: 3px;
    /* The overflow property is preventing the image from overflowing out of the container.
        This allows the border radius to be visable. */
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg);
      -webkit-transform: rotateY(180deg);
      -moz-transform: rotateY(180deg);
      -ms-transform: rotateY(180deg);
      -o-transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg);
    -webkit-transform: rotateY(-180deg);
    -moz-transform: rotateY(-180deg);
    -ms-transform: rotateY(-180deg);
    -o-transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0deg);
    -webkit-transform: rotateY(0deg);
    -moz-transform: rotateY(0deg);
    -ms-transform: rotateY(0deg);
    -o-transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    /* The background-blend-mode property allows blending of background layers.
        Previously, the images would have had to have been exported and Photoshopped to complete the effects. */
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /* The box-decoration-break property allows specification of how parts of whole element are treated.
        In this case, one line of text (e.g. The Sea Explorer) is broken into two lines.
        The padding specs are applied to each of the two lines of text. */
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      /* This works for centering when it is a block element inside a block element. */
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    width: 90%;
    text-align: center;
    /* This moves the element 50% of its parent element's height down and 50% of its parents element's width to the left. */
    top: 50%;
    left: 50%;
    /* The transform property pulls the element back to the center by translating it 50% of it's own width to the right
        and 50% of its own height upward. */
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%); }
  .card__price-box {
    text-align: center;
    /* Specified color property in the price box element so child elements will inherit it. */
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.composition {
  position: relative;
  /* The outline-offset property allows the outline to not be flush with the image. */
  /* .composition:hover .composition__photo:not(:hover) 
        This selects the non-hovered child elements, when hovering over the composition div. */ }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    position: absolute;
    z-index: 10;
    border-radius: 2px;
    -webkit-border-radius: 2px;
    -moz-border-radius: 2px;
    -ms-border-radius: 2px;
    -o-border-radius: 2px;
    transition: all 0.2s;
    -webkit-transition: all 0.2s;
    -moz-transition: all 0.2s;
    -ms-transition: all 0.2s;
    -o-transition: all 0.2s;
    outline-offset: 2rem;
    /* The outline property is the same as border, but allows the use of the outline-offset property. */ }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      transform: scale(1.05) translateY(-0.5rem);
      -webkit-transform: scale(1.05) translateY(-0.5rem);
      -moz-transform: scale(1.05) translateY(-0.5rem);
      -ms-transform: scale(1.05) translateY(-0.5rem);
      -o-transform: scale(1.05) translateY(-0.5rem);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95);
    -webkit-transform: scale(0.95);
    -moz-transform: scale(0.95);
    -ms-transform: scale(0.95);
    -o-transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  -ms-border-radius: 3px;
  -o-border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s;
  -webkit-transition: transform 0.3s;
  -moz-transition: transform 0.3s;
  -ms-transition: transform 0.3s;
  -o-transition: transform 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03);
    -webkit-transform: translateY(-1.5rem) scale(1.03);
    -moz-transform: translateY(-1.5rem) scale(1.03);
    -ms-transform: translateY(-1.5rem) scale(1.03);
    -o-transform: translateY(-1.5rem) scale(1.03); }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: #fff;
  border-radius: 3px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  -ms-border-radius: 3px;
  -o-border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg);
  -webkit-transform: skewX(-12deg);
  -moz-transform: skewX(-12deg);
  -ms-transform: skewX(-12deg);
  -o-transform: skewX(-12deg);
  /* The shape-outside property allows definition of some shape that other inline content will wrap around.
        This property is effective when using the float property and the dimensions are defined (width & height).
    The circle defined is specified with 50% radius (50% of height/width) and positioned in the center (50% 50%). */ }
  .story__shape {
    position: relative;
    width: 15rem;
    height: 15rem;
    float: left;
    overflow: hidden;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    -webkit-transform: translateX(-3rem) skewX(12deg);
    -moz-transform: translateX(-3rem) skewX(12deg);
    -ms-transform: translateX(-3rem) skewX(12deg);
    -o-transform: translateX(-3rem) skewX(12deg); }
  .story__img {
    height: 100%;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    transform: translateX(-4rem) scale(1.4);
    -webkit-transform: translateX(-4rem) scale(1.4);
    -moz-transform: translateX(-4rem) scale(1.4);
    -ms-transform: translateX(-4rem) scale(1.4);
    -o-transform: translateX(-4rem) scale(1.4);
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    -ms-transition: all 0.5s;
    -o-transition: all 0.5s; }
  .story__text {
    transform: skewX(12deg);
    -webkit-transform: skewX(12deg);
    -moz-transform: skewX(12deg);
    -ms-transform: skewX(12deg);
    -o-transform: skewX(12deg); }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    -webkit-transform: translate(-50%, 20%);
    -moz-transform: translate(-50%, 20%);
    -ms-transform: translate(-50%, 20%);
    -o-transform: translate(-50%, 20%);
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    -ms-transition: all 0.5s;
    -o-transition: all 0.5s;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%); }
  .story:hover .story__img {
    transform: translate(-4rem) scale(1);
    -webkit-transform: translate(-4rem) scale(1);
    -moz-transform: translate(-4rem) scale(1);
    -ms-transform: translate(-4rem) scale(1);
    -o-transform: translate(-4rem) scale(1);
    /* brightness: < 100% = darker
                   > 100% = brighter */
    filter: blur(3px) brightness(80%);
    -webkit-filter: blur(3px) brightness(80%);
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden; }

.row {
  max-width: 114rem;
  margin: 0 auto;
  /* This selects everything except for the last child. */
  /* This includes the clearfix mixin created, which will restore the row to the intended height. */
  /* This will select all elements where the class attributes begin with "col-". 
        *= indicates includes
        $= indicates ends with */
  /* The calc function allows for operations with mixed units.
        If using a variable within calc, the variable must be wrapped in hash followed my curly brackets. */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 100% - 2 * ((100% - 3 * 6rem) / 4) - 2 * 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* The translate transformation is in relation to the element itself. */
  /* The element is shifted 50% of its width to the left and 50% of its height to the top. */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    text-align: center;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  margin-top: -10rem;
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  transform: skewY(-7deg);
  -webkit-transform: skewY(-7deg);
  -moz-transform: skewY(-7deg);
  -ms-transform: skewY(-7deg);
  -o-transform: skewY(-7deg);
  /* The direct child elements are all impacted from inheritance and can be offset by the opposite skew.
     & > * selects all DIRECT child element(s) of an element
       > = direct child */ }
  .section-features > * {
    transform: skewY(7deg);
    -webkit-transform: skewY(7deg);
    -moz-transform: skewY(7deg);
    -ms-transform: skewY(7deg);
    -o-transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -10rem; }

.section-stories {
  padding: 15rem 0;
  background-color: #f7f7f7; }
