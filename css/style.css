/* Clearfix appends a pseudo-element after the element which will then clear floats.
    If an element's child elements are floated left/right, then the element's height will collapse.
    Always specify the content property; otherwise, the pseudo-element will not appear.
        (Specify the content as empty, so it's not visible.)
    The clear property will clear both right and left floats. */
/* Custom animations can be created with @keyframes rule.
    For browser performance, IT'S BEST TO ONLY ANIMATE OPACITY AND TRANSFORM PROPERTIES.
    That's what browsers are optimized for. */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
    -webkit-transform: translateX(-10rem);
    -moz-transform: translateX(-10rem);
    -ms-transform: translateX(-10rem);
    -o-transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem);
    -webkit-transform: translateX(1rem);
    -moz-transform: translateX(1rem);
    -ms-transform: translateX(1rem);
    -o-transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    -webkit-transform: translate(0);
    -moz-transform: translate(0);
    -ms-transform: translate(0);
    -o-transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
    -webkit-transform: translateX(10rem);
    -moz-transform: translateX(10rem);
    -ms-transform: translateX(10rem);
    -o-transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem);
    -webkit-transform: translateX(-1rem);
    -moz-transform: translateX(-1rem);
    -ms-transform: translateX(-1rem);
    -o-transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0);
    -webkit-transform: translateX(0);
    -moz-transform: translateX(0);
    -ms-transform: translateX(0);
    -o-transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
    -webkit-transform: translateY(3rem);
    -moz-transform: translateY(3rem);
    -ms-transform: translateY(3rem);
    -o-transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0);
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0); } }

/* The inherit keyword forces inheritance. (See box-sizing specifications in body.) */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

/* By setting the root font size to a percentage (rather than a pixel value),
the font size will be determined as a percentage of the font size given by the browser.
This is best practice, so if users accessing the page have a specified font size setting,
then the font will adjust according the to their specifications.
This will be considered the root for the rem values.
Otherwise, the root will stay as the pixel value you provide.
The default browser font size is 16px.
Below, we want 10px as the root, so we found the percentage 10 is of 16. */
/* FYI: rem is  not supported below IE9 */
html {
  font-size: 62.5%; }

/* https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

/* The backface-visibilty is meant to refer to the backside of an element.
    In this case, it is preventing animation side effects (like shifts) .*/
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  margin-bottom: 6rem;
  /* All span elements are inline by default.
            The display block creates line breaks because it takes up 100% of the width, which creates a 2-lined h1. */
  /* The animation properties apply the @keyframes rules. */
  /* The animation property is short-hand for the animation properties in heading-primary-main. */ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*
          animation-delay: 3s;
          animation-iteration-count: 3;
          */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    -webkit-animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all 0.2s;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  -ms-transition: all 0.2s;
  -o-transition: all 0.2s; }
  .heading-secondary:hover {
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    -webkit-transform: skewY(2deg) skewX(15deg) scale(1.1);
    -moz-transform: skewY(2deg) skewX(15deg) scale(1.1);
    -ms-transform: skewY(2deg) skewX(15deg) scale(1.1);
    -o-transform: skewY(2deg) skewX(15deg) scale(1.1); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

/* link & visited are pseudo-classes (a special state of a selector) */
/* The inline-block displays an element as inline-level block container.
    This treats the element as if it is text, so the parent class (aka text-box) should use text-align to center. */
/* A high border-radius will have the same effect.
    Ex: 100px will display the same as 500px */
/* The transition property is the simpler method to perform an animation (compared to @keyframes).
    It allows a smooth gradual change through a specified timeframe.
    Here, all is specified, so all properties (translations in hover and active) will be animated with transition. */
.btn {
  /* To give the effect of pressing a button, adjust box-shadow.
        box-shadow: [x] [y] [blur] [rgba(r, g, b, opacity)] */
  /* The active pseudo-class reprecents when the link is clicked. */
  /* Transformations are in relation to the initial state - NOT the previous state. */
  /* ::after is a pseudo-element
      It acts like a virtual child element after the element selected.
      The content and display properties are required for ::after.
      Setting the position as absolute in relation to the parent will allow it to be in the same place as the parent.
      Setting the z-index to -1 makes sure this is behind the parent. */
  /* animation: [name] [duration] [timing-function] [delay] */
  /* The animation-fill-mode property specifies a style for the element when the animation is not playing.
      Below it is set as backwards, which will use moveInBottom at the 0% keyframe properties during the delay. */ }
  .btn:link, .btn:visited {
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    -webkit-border-radius: 10rem;
    -moz-border-radius: 10rem;
    -ms-border-radius: 10rem;
    -o-border-radius: 10rem;
    transition: all 0.2s;
    -webkit-transition: all 0.2s;
    -moz-transition: all 0.2s;
    -ms-transition: all 0.2s;
    -o-transition: all 0.2s;
    position: relative; }
  .btn:hover {
    transform: translateY(-3px);
    -webkit-transform: translateY(-3px);
    -moz-transform: translateY(-3px);
    -ms-transform: translateY(-3px);
    -o-transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      opacity: 0;
      transform: scaleX(1.4) scaleY(1.6);
      -webkit-transform: scaleX(1.4) scaleY(1.6);
      -moz-transform: scaleX(1.4) scaleY(1.6);
      -ms-transform: scaleX(1.4) scaleY(1.6);
      -o-transform: scaleX(1.4) scaleY(1.6); }
  .btn:active {
    transform: translateY(-1px);
    -webkit-transform: translateY(-1px);
    -moz-transform: translateY(-1px);
    -ms-transform: translateY(-1px);
    -o-transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
    -webkit-transition: all 0.4s;
    -moz-transition: all 0.4s;
    -ms-transition: all 0.4s;
    -o-transition: all 0.4s;
    -webkit-border-radius: 10rem;
    -moz-border-radius: 10rem;
    -ms-border-radius: 10rem;
    -o-border-radius: 10rem; }
  .btn--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    -webkit-animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  -ms-transition: all 0.2s;
  -o-transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
  -webkit-transform: translateY(-2px);
  -moz-transform: translateY(-2px);
  -ms-transform: translateY(-2px);
  -o-transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0);
  -webkit-transform: translateY(0);
  -moz-transform: translateY(0);
  -ms-transform: translateY(0);
  -o-transform: translateY(0); }

.row {
  max-width: 114rem;
  margin: 0 auto;
  /* This selects everything except for the last child. */
  /* This includes the clearfix mixin created, which will restore the row to the intended height. */
  /* This will select all elements where the class attributes begin with "col-". 
        *= indicates includes
        $= indicates ends with */
  /* The calc function allows for operations with mixed units.
        If using a variable within calc, the variable must be wrapped in hash followed my curly brackets. */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 100% - 2 * ((100% - 3 * 6rem) / 4) - 2 * 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* The translate transformation is in relation to the element itself. */
  /* The element is shifted 50% of its width to the left and 50% of its height to the top. */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    text-align: center;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
